import numpy as np
from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt
import json

def get_linear_phase(frames: int, peaks: list[int]) -> np.ndarray:
    """Calculate the linear phase progression."""
    peaks_copy = peaks.copy()

    if len(peaks_copy) == 0:
        return None

    if peaks_copy[0] != 0:
        peaks_copy.insert(0, 0)
    if peaks_copy[-1] != (frames-1):
        peaks_copy.append(frames-1)

    phase = [0.0] * frames
    for k in range(len(peaks_copy) - 1):
        start = peaks_copy[k]
        end = peaks_copy[k+1]

        for t in range(start, end):
            instant_phase = (2 * np.pi) * ((t - start)/\
                                            (end - start)) + \
                                            (2 * np.pi * k)
            phase[t] = instant_phase
        # phase.append(2 * np.pi * (len(peaks_copy) - 1))

    return phase

def get_cubic_phase(total_frames: int, peaks: list[int]) -> np.ndarray | None:
    """Calculate the instantaneous phase with smooth interpolation and handle negative values."""
    if not peaks:  # Handle empty input
        return None

    peaks_copy = peaks.copy()

    # Ensure first peak starts at frame 0
    if peaks_copy[0] != 0:
        peaks_copy.insert(0, 0)

    # Ensure last peak is at the final frame
    if peaks_copy[-1] != total_frames - 1:
        peaks_copy.append(total_frames - 1)

    num_cycles = len(peaks_copy) - 1  # Number of peak-to-peak cycles

    # Define phase values at the peak positions (increments by 2π per cycle)
    peak_phases = np.arange(num_cycles + 1) * 2 * np.pi

    # Use Clamped Cubic Spline to reduce overshooting
    cubic_spline = CubicSpline(peaks_copy, peak_phases, bc_type='clamped')

    # Generate phase values for all frames
    frames = np.arange(total_frames)
    phase = cubic_spline(frames)

    # Handle potential negative values
    phase = np.clip(phase, 0, None)  # Remove negatives
    phase = np.mod(phase, 2 * np.pi)  # Keep phase in range [0, 2π]

    return phase


if __name__ =="__main__":
    frames = 300
    t = np.arange(0, frames, 1)
    dff = np.array([
      0.0028535530269802093,
      0.0022671559367217547,
      0.0018012617928646417,
      0.0014311075801541314,
      0.0011370190130538778,
      0.0009033648161564329,
      0.0007177258970168834,
      0.0005702352516233998,
      0.00045305351742986233,
      0.0003599522987595454,
      0.0002859831176618979,
      0.00022721439443356263,
      0.0019356316250968906,
      0.0021637293474501633,
      0.0017190890756713974,
      0.0013658211243357957,
      0.0010851487395749583,
      0.0008621537374257313,
      0.0006849835786090517,
      0.0005442213872029773,
      0.000432385428699705,
      0.0017770621407506462,
      0.0029575280069832344,
      0.0023497643518994617,
      0.0018668944119617926,
      0.001483252881335435,
      0.001178448602070643,
      0.000936280741603489,
      0.0007438776927201357,
      0.0005910129271472037,
      0.0004695614392976822,
      0.0003730678892923672,
      0.00029640349137107896,
      0.0011490453315788414,
      0.0009129197601798955,
      0.0007253173270211688,
      0.003057113165804619,
      0.0047012751503485726,
      0.003735176380638238,
      0.0029676081803983205,
      0.0023577730781383366,
      0.003373303326309714,
      0.0034883771706115453,
      0.002771525511213657,
      0.0022019848438468905,
      0.0017494831755700286,
      0.0013899693225206454,
      0.0011043345512133887,
      0.0008773969189421176,
      0.0006970943293617631,
      0.0005538434128697734,
      0.0004400301552590188,
      0.00347468670853965,
      0.0027606484004435764,
      0.0021933429486293817,
      0.001742617165419996,
      0.002175996707323466,
      0.002898489006071286,
      0.005411080379885084,
      0.006301152318990256,
      0.005006283308253339,
      0.003977506223260488,
      0.003160139924561241,
      0.002510740092474246,
      0.0019947900923509955,
      0.0015848663605082054,
      0.0012591807981711983,
      0.0010004226993464834,
      0.000794838659246795,
      0.0006315015589369768,
      0.00337597340592101,
      0.004353783563563759,
      0.0034590933338221196,
      0.002748259420203813,
      0.0021834998688495637,
      0.001734796810743757,
      0.001378300964200359,
      0.004205271810420438,
      0.0047261280676603465,
      0.0037549220936127295,
      0.0029832962051070454,
      0.0023702372580633414,
      0.00188316019371266,
      0.0014961760908616742,
      0.0011887161285269213,
      0.0009444383203625679,
      0.0007503589120765158,
      0.0026331920846886995,
      0.004280579211742762,
      0.0034009322696135196,
      0.00270205029047682,
      0.0021467865848135686,
      0.0017056280029200447,
      0.0013551262640285496,
      0.0010766516428647416,
      0.0008554027700985696,
      0.0006796199160067882,
      0.000539959942121593,
      0.0038832205734948807,
      0.003760431983297096,
      0.002987673828018021,
      0.002373715291825991,
      0.0018859235013570443,
      0.0014983715465871226,
      0.0011904604242994894,
      0.0009458241682787572,
      0.0007514599721587625,
      0.0018018025375353065,
      0.0027018202710844303,
      0.0036582717013343403,
      0.0042027527797478615,
      0.0033390989496566675,
      0.0026529235431895105,
      0.0021077552453882347,
      0.0016746174935446528,
      0.004784266431563466,
      0.006644922225537519,
      0.005279409469612847,
      0.004194505729611182,
      0.0033325466450381683,
      0.002647717718670188,
      0.0021036192031093906,
      0.001671331396276316,
      0.0013278775132162944,
      0.001055002433409667,
      0.0008382024120616467,
      0.0006659541829825741,
      0.000529102478649716,
      0.0034722121311823737,
      0.007616298695082617,
      0.008426832084298199,
      0.006695141883482694,
      0.005319309129641603,
      0.0042262061221576275,
      0.0033577326964199226,
      0.005128478211233125,
      0.007312023532567384,
      0.005809423341556952,
      0.004615603247323893,
      0.004102809390375018,
      0.0032596936446175236,
      0.00945419644259119,
      0.008902254982797925,
      0.007072866718660461,
      0.005619412577667159,
      0.004464639158932776,
      0.0035471684173349924,
      0.0028182353227279677,
      0.002239095920976546,
      0.0032372958339942103,
      0.006823146422606306,
      0.005992060881658682,
      0.005315770475031331,
      0.004517855320009413,
      0.008857266464470482,
      0.00703712321382771,
      0.005591014262158521,
      0.004442076617080718,
      0.0035292424141299423,
      0.0028039930625688735,
      0.002227780405068227,
      0.00176997782179215,
      0.0014062523768091672,
      0.001117271483819562,
      0.0008876753484241497,
      0.0007052605706055872,
      0.0005603315145947412,
      0.00044518497039815853,
      0.00035370071592662357,
      0.0002810162174502815,
      0.0012551855682771534,
      0.005835923824719777,
      0.0070550373524871195,
      0.005605247095902604,
      0.004453384643675696,
      0.0035382266731869903,
      0.002811131081756058,
      0.0022334515814660893,
      0.0017744835874523787,
      0.0014098322203478994,
      0.00628134857728398,
      0.009434608572176808,
      0.007495823148481115,
      0.0059554526553443924,
      0.0047316239494304725,
      0.0037592885871962915,
      0.007298529114491494,
      0.008199943580045393,
      0.009755284981551772,
      0.015798168787404258,
      0.01856569759444619,
      0.016278308590054042,
      0.02164305711820201,
      0.022121193874574712,
      0.01757535099082734,
      0.013963665984854722,
      0.01109417205029657,
      0.008814351017496221,
      0.007659238574581105,
      0.007989456789024029,
      0.006805549634856575,
      0.009427964985838441,
      0.00814833090526071,
      0.0064738719104108985,
      0.005143509511297429,
      0.0040865328290265734,
      0.003246761870670574,
      0.002579561473228468,
      0.0020494688736720636,
      0.004089137502155796,
      0.006037274636551855,
      0.007852768872403795,
      0.006239047040809569,
      0.00495694048938934,
      0.003938303214357413,
      0.004969996093259502,
      0.006432404294140237,
      0.005808239375142457,
      0.00550370443518911,
      0.004372708713040987,
      0.0034741294185154713,
      0.0027602056319459014,
      0.0021929911678078566,
      0.0017423376745640683,
      0.001384292201796641,
      0.002107686886373099,
      0.005324995237737617,
      0.006374605147073525,
      0.0050646417875538675,
      0.008940978947759902,
      0.011273416698494779,
      0.010630138888320411,
      0.008445675360144468,
      0.006710112919345084,
      0.005331203659903833,
      0.004235656360034254,
      0.0033652409370949175,
      0.002673693426019077,
      0.0021242569759384812,
      0.001687728165058182,
      0.0013409047923084937,
      0.0010653526434299331,
      0.0008464256831457644,
      0.0006724875950766748,
      0.0005342932930050621,
      0.001360472452530412,
      0.0010808992047240203,
      0.0008587774699884285,
      0.004632429777918821,
      0.007621524104409595,
      0.008440194678406709,
      0.00820424008297241,
      0.009676883578882847,
      0.01273887206689601,
      0.011506909983074335,
      0.010054478427912301,
      0.007988311499017497,
      0.006346736040348265,
      0.005042499703574384,
      0.004006280251597246,
      0.003183000971316036,
      0.005416359786481988,
      0.008496682715071011,
      0.009099706111963457,
      0.007229742198270448,
      0.00574405058914306,
      0.004563664410956152,
      0.0036258442596576947,
      0.0028807435015885023,
      0.0022887588455682427,
      0.0018184253649373165,
      0.001444744086625888,
      0.0011478532559473086,
      0.003307507839936781,
      0.007258418215096454,
      0.00829053997144513,
      0.01392876870899423,
      0.017700293227618534,
      0.014062932944750056,
      0.011173039930205986,
      0.008877011770761603,
      0.007052810915425349,
      0.005603478185370855,
      0.00445197923926384,
      0.0035371100754137195,
      0.0028102439416725668,
      0.0022327467461649843,
      0.001773923593815603,
      0.002247971304005254,
      0.006462635562412347,
      0.006892586506211884,
      0.007343959542608516,
      0.005834796591703482,
      0.0046357623662047175,
      0.0036831262886656726,
      0.0029262542353667136,
      0.002324917252051064,
      0.0018471533209783787,
      0.002235021910788179,
      0.004858266218310846
    ])
    peaks_ind = [
      59,
      116,
      141,
      154,
      172,
      181,
      193,
      211,
      230,
      253,
      263,
      277
    ]
    phase_linear = get_linear_phase(frames, peaks_ind)
    print(f"shape of linear phase: {len(phase_linear)}")
    phase_cubic = get_cubic_phase(frames, peaks_ind)
    print(f"shape of cubic phase: {len(phase_cubic)}")

    fig, ax = plt.subplots()
    ax.plot(t, dff, label='dff')
    ax.plot(peaks_ind, dff[peaks_ind], 'x', label='peaks')
    ax.plot(t, phase_linear, 'b--', label='linear phase')
    ax.plot(t, phase_cubic, 'g', label='cubic phase')
    plt.legend()

    path = '/Users/annayang26/Desktop/compare_phases.png'
    fig.savefig(path)
    plt.show()
    plt.close()
